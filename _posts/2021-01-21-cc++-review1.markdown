---
layout: post
title: <C/C++> 02. Default value와 Namespace
date: 2021-01-21 13:25:23 +0900
category: C/C++
comments: true
---
## Parameter의 Default Value

C++로 짜놓았던 코드들을 리팩토링하다보니, 예기치 못한 오류가 발생하는 일이 종종 생겼다. 그래서, C++에 대한 정교한 사용법을 익히고 복습하고자 몇몇 잊기 쉬운 개념들을 게시하려고 한다. 우선, 함수 매개변수에 디폴트 값을 부여하는 방법이다.

```c
#include <stdio.h>
int Add(int num1, int num2=2);          // 디폴트 값은 함수의 선언 부분에만 명시하면 된다.
                                        // 함수에 전달되는 인자는 왼쪽에서부터 오른쪽으로 채워지므로,  
                                        // 부분적 디폴트 값은 오른쪽부터 채워야 한다.

int main(void){
    std::cout << Add(1) << std::endl;
    std::cout << Add(1,3) << std::endl;
    return 0;
}

int Add(int num1, int num2){
    return num1+num2;
}
```

## Namespace

바로 코드를 통해 설명을 대신하겠다.

```cpp
#include <iostream>

namespace FirstCompany{
    void Func(void);
}

namespace SecondCompany{
    void Func(void);
    namespace ThirdCompany{
        void Func(void);
    }
}

int main(void){
    using FirstCompany::Func;
    Func();
    SecondCompany::Func();
    SecondCompany::ThirdCompany::Func();

    namespace NewCompany = SecondCompany::ThirdCompany;
    NewCompany::Func();

    return 0;
}

void FirstCompany::Func(void){
    std::cout << "FirstCompany's Function" << std::endl;
}

void SecondCompany::Func(void){
    std::cout << "SecondCompany's Function" << std::endl;
}

```

## Scope Resolution Operator의 중요한 기능

최근에 내가 QT 프로그래밍을 하면서, QT의 connect함수와 Winsock2의 connect함수와 충돌하는 경험을 했었다. 이럴때 해결책은, 범위 지정 연산자를 사용해서 그 범위를 지정해주는 것이었다.

```cpp
...
int val=100;

int Func(void){
    int val=20;
    val+=3;
    ::val+=7;       // 전역변수에 접근하기 위해서는 이렇게 범위 지정 연산자가 필요하다. connect함수를 사용할때도 마찬가지였다.
}
...

```

<br/>

다음 포스팅에서도 C++을 복습하면서 기억하면 좋을 부분을 기록하도록 하겠다.