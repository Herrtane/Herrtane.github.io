---
layout: post
title: <Database> 09. 릴레이션 정규화
date: 2021-12-19 23:30:23 +0900
category: Database
comments: true
---

## 개요

- 논리적 설계를 하는 과정에서 대부분 여러가지 갱신 이상(update anomaly)이 발생함. 정규화는 이미 생성된 관계 데이터베이스 스키마를 기반으로 보다 좋은 데이터베이스 설계를 하는 상향식 방법임.
- 갱신 이상에는 정보의 중복, 수정 이상, 삽입 이상, 삭제 이상이 존재.
- 정규화는 원래의 릴레이션을 분해함으로써 갱신 이상을 최소화하는 것. 

## 함수적 종속성 (functional dependency) 

- 실세계에 대한 지식과 의미를 기반으로 어떤 함수적 종속성들이 존재하는가를 파악해야함. 모든 함수적 종속성들을 찾아내면 실세계를 보다 훌륭하게 모델링 가능. 

### 결정자 (determinant) 및 함수적 종속성 

- 주어진 릴레이션에서 다른 애트리뷰트를 고유하게 결정하는 하나 이상의 애트리뷰트.
- A -> B로 표기.
- 애트리뷰트 A가 애트리뷰트 B의 결정자이면, B가 A에 함수적으로 종속한다고 말함.
- 완전 함수적 종속성 (full FD) : 릴레이션 R에서 애트리뷰트 B가 애트리뷰트 A에 함수적으로 종속하면서, 애트리뷰트 A의 어떠한 진부분 집합에도 함수적으로 종속하지 않음. 여기서 A는 복합 애트리뷰트.
- 부분 함수적 종속성 : 완전 함수적 종속성의 반대.
- 이행적 함수적 종속성 (transitive FD) : 애트리뷰트 C가 이행적으로 A에 종속한다는 것의 필요충분조건은 A -> B and B -> C가 성립하는 것. 예를 들면, 어떤 학생의 학번을 알면, 이 학생이 속한 학과 이름을 알 수 있고, 학과이름을 알면 학과 전화번호를 알 수 있으므로, 학과 전화번호는 학번에 이행적으로 종속함. 

## 릴레이션 분해 (decomposition) 

- 무손실 분해(lossless decomposition)된 두 릴레이션을 다시 조인하면 원래의 릴레이션에 들어있는 정보를 완전하게 얻을 수 있음.
- 우리는 불필요한 분해나 나쁜 분해를 피하고, 가짜 투플이 생기는 것을 방지해야 함. 

## 정규형 (NF) 

1. 제1정규형 : 릴레이션 R의 모든 애트리뷰트가 원잣값만들 가짐. 즉, 모든 애트리뷰트에 반복 그룹 (repeating group)이 나타나지 않음.
2. 제2정규형 : 릴레이션 R이 1NF를 만족하면서, 어떤 후보키에도 속하지 않는 모든 애트리뷰트들이 R의 기본키에 완전 함수적 종속하는 것. 즉, 기본키가 한개의 애트리뷰트로 이루어진 릴레이션이 1NF을 만족하면, 자동적으로 2NF도 만족.
3. 제3정규형 : 릴레이션 R이 2NF를 만족하면서, 키가 아닌 모든 애트리뷰트가 R의 기본키에 이행적으로 종속하지 않음.
4. BCNF : 릴레이션 R이 3NF를 만족하면서, 모든 결정자가 후보키여야 함. 즉, 하나의 후보키만을 가진 릴레이션이 3NF를 만족하면 자동적으로 BCNF도 만족. 갱신 이상이 발생하지 않으므로 실제적인 정규화의 목표. 

- 구체적인 정규화의 과정은 생략. 

## 역정규화 (denormalization) 

- 주어진 어플리케이션에서 빈번하게 수행되는 검색 질의들의 수행 속도, 즉 성능을 높이기 위해서 이미 분해된 두 개 이상의 릴레이션들을 합쳐서 하나의 릴레이션으로 만드는 작업.
- 데이터 중복 및 갱신 이상을 대가로 치르면서 성능상의 요구를 만족시킴.