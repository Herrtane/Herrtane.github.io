---
layout: post
title: <정보처리기사> 01. 소프트웨어 설계
date: 2022-03-07 13:10:23 +0900
category: InformationProcessing
comments: true
---

## 서론

이 포스팅을 작성하는 목적은 크게 두가지이다. 

1. 2달뒤에 있을 정보처리산업기사 실기를 위해 그동안 공부했던 내용을 총정리하는 목적으로 작성한다.
2. 4학년때 치를 정보처리기사 시험을 위해 정리해놓는다. (그런데 내년에 또 개정된다는 소문이 있다..)

## SDLC (Software Development Life Cycle)

### Waterfall Model

- 타당성검토 > 계획 > 요구분석 > 설계 > 구현 > 테스트 > 유지보수
- 고전적, 선형적 모델
- 단계별 산출물이 명확하나, 중간에 요구사항 변경이 유연하지 않음.
    - 요구사항 개발 프로세스 : 도출 > 분석 > 명세화 > 확인 및 검증
    - 기능적 요구사항과 비기능적 요구사항으로 나뉨.

### Prototype Model

- 시제품을 만들어 최종 결과물을 예측
- 개발 중간에 요구사항 변경이 유연함.
- 인터페이스에 중점을 두어 개발.

### Spiral Model

- Waterfall 과 Prototype Model의 장점에 위험분석을 추가한 모형.
- 점진적 개발 과정의 반복으로 요구사항 추가가 가능함.
- 계획 및 정의 > 위험분석 > 개발 > 고객평가

### Agile Model

- 일정한 주기 (Sprint)를 반복하는 기능 중심 개발 모델.
- 변화에 유연한 모델.
- XP 모델링의 5가지 철학 : 의사소통, 피드백, 존중, 용기, 단순성
- Scrum 기법 사용 가능.
    - Scrum Master : 일일 회의 주관.
    - Product Owner : 요구사항이 담긴 Backlog를 작성
    - Sprint : 2~4주를 넘지 않도록 함.

## UML (Unified Modeling Language)

## UI (User Interface)

## 품질 요구사항

### ISO/IEC 9126

- 기능성 (Functionality) : 요구사항을 정확히 만족하는 기능을 수행하는지
- 신뢰성 (Reliability) : 기능을 오류없이 수행하는지
- 사용성 (Usability) : 사용자가 정확히 이해하고 사용하는지
- 효율성 (Efficiency) : 한정된 시간과 자원으로 얼마나 효율적으로 처리하는지
- 유지보수성 (Maintainability) : 쉽게 개선하고 확장하고 보수할 수 있는지
- 이식성 (Portability) : 다른 환경에서도 쉽게 적용할 수 있는지

### ISO/IEC 12207 

- 기본 프로세스
- 조직 프로세스
- 지원 프로세스

### ISO/IEC 15504 (SPICE)

- 불완전 (Lv.0) > 수행 (Lv.1) > 관리 (Lv.2) > 확립 (Lv.3) > 예측가능 (Lv.4) > 최적화 (Lv.5)

### CMMI (Capability Maturity Model Integration)

- 성숙도와 능력도를 평가하는 모델
- 초기 > 관리 > 정의 > 정량적 관리 > 최적화

## 아키텍쳐

### 소프트웨어 아키텍쳐

- 모듈화 : 적절한 모듈의 크기를 찾는 것이 중요함. 모듈의 크기가 크면 모듈 하나의 개발비용이 크고, 모듈의 크기가 작으면 모듈간 통합 비용이 큼.
- 추상화 : 전체적이고 포괄적인 개념을 설계한 후, 세분화하고 구체화하는 것. 과정, 데이터, 제어 추상화가 있음.
- 단계적 분해 : 하향식
- 정보 은닉

### 아키텍쳐 패턴

- 계층 패턴
- 파이프필터 패턴
- 클라이언트-서버 패턴
- MVC 패턴 : Model은 데이터보관, View는 사용자에게 정보 표시, Controller는 입력처리. 대화형 어플리케이션에 적합.
- 마스터-슬레이브 패턴
- 브로커 패턴
- 피어투피어 패턴

### 아키텍쳐 뷰

- 4+1

## 결합도와 응집도

### 결합도 (Coupling)

- 결합도는 낮을수록 좋음.
- 내용 (Content) : 모듈간 직접 참조
- 공유 (Common) : 모듈간 전역 변수 사용
- 외부 (External) : 한 모듈의 변수를 외부에서 다른 모듈이 참조
- 제어 (Control) : 모듈간 제어를 위한 제어 신호, 제어 요소를 전달
- 스탬프 (Stamp) : 모듈간 자료구조 전달
- 자료 (Data) : 모듈간 매개변수로 데이터 전달

### 응집도 (Cohesion)

- 응집도는 높을수록 좋음.
- 우연적 (Coincidental) : 모듈 내 요소들이 서로 아무 연관이 없음
- 논리적 (Logical) : 모듈 내 요소들이 특정 형태를 갖거나 유사한 성격을 가짐
- 시간적 (Temporal) : 특정 시간에 요소들이 수행됨
- 절차적 (Procedural) : 모듈 내 요소들이 순차적으로 (주의) 수행됨
- 통신적 (Communication) : 요소들이 동일한 입출력으로 서로 다른 기능을 수행
- 순차적 (Sequential) : 모듈의 출력값을 다시 입력값으로 사용
- 기능적 (Functional) : 모든 요소들이 하나의 기능을 위해 모임

## 코드

- 순차코드, 블록코드, 10진코드, 그룹분류코드, 표의숫자코드, 연상코드, 합성코드 

## 디자인 패턴 (Gang of Four)

- 추후 정리.

## 개발 기술 환경

- OS : 하드웨어가 아닌 소프트웨어
- 미들웨어 : OS와 응용 소프트웨어 사이에서 추가적인 서비스를 제공하는 소프트웨어.
- DBMS : DB를 관리하는 소프트웨어
- WAS (Web Application Server) : 웹서버와는 다르게 동적 컨텐츠를 처리하는 미들웨어. Tomcat, JEUS, WebSphere, JBoss, WebLogic 등이 있음.
- Open Source

### 미들웨어 솔루션의 종류

- RPC (Remote Proceduce Call) : 원격 프로시저 호출 미들웨어.
- MOM (Message Oriented Middleware) : 메시지 기반 비동기형 메시지를 전달하는 미들웨어.
- DB
- TP Monitor : 빠른 응답속도가 필요한 업무에 사용되는 트랜잭션 처리 및 감시 미들웨어. 항공기나 철도 예약 업무 등에 최적.
- Legacyware
- ORB (Object Request Broker) : CORBA 표준 스펙을 구현한 객체지향 미들웨어. 분산 시스템 관련 표준 사용.
- WAS

## 인터페이스 및 방법 명세화