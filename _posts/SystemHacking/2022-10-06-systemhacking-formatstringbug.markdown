---
layout: post
title: <System Hacking> 18. Format String Bug
date: 2022-10-06 10:30:23 +0900
category: System_Hacking
comments: true
---

## Format String에 대하여

- %d : 값을 입력하면 10진수를 출력
- %s : 포인터를 입력하면 해당 포인터에 위치하는 null바이트로 끝나는 문자열을 출력
- %x : 값을 입력하면 16진수로 출력
- %p : 포인터를 입력하면 해당 포인터가 가르키는 주소를 출력
- %n : 포인터를 입력하면 지금까지 출력한 바이트수를 포인터가 가르키는 주소에 넣어줌

<br/>

여기서 64비트 포너블을 진행할 때 16진수를 출력하기 위해서 %x보다는 %p를 많이쓰는데, %x는 앞에 0x도 잘 안붙여주고 무조건 4바이트로 출력하기 때문이다. 32비트에서는 크게 문제될 것 없지만, 64비트에서는 8바이트를 출력해주는 %p를 많이 쓴다. (참고로 32비트에서는 %p도 4바이트로 출력해준다.)

<br/>

주로 FSB를 할때는 %n 서식 지정자를 많이 사용하는데, 나머지 서식 지정자들은 전부 인자에 지정된 변수를 '읽어오지만', **%n은 지정된 변수를 읽는 것이 아니라, 지정된 변수에 %n전까지 출력된 문자의 개수를 지정된 변수에 10진수 형식으로 '쓴다'.** 즉, 이를 통해 메모리의 특정 값을 변조할 수 있다.

- %n : 4바이트
- %hn : 2바이트
- %hhn : 1바이트

<br/>

%[n]c라는 표현도 자주쓰는데, **포맷 스트링의 width**라는 개념이다. 이는, 출력의 최소 길이를 지정하고, 출력할 문자의 길이가 최소 길이보다 작으면 그만큼 **패딩 문자를 추가**한다. 예를 들어 %1337c에 대응되는 인자의 길이가 1,337보다 작으면, 인자를 출력하고 남은 길이를 공백으로 출력하는 형식이다. 이를 이용해서, %n으로 원하는 값을 조작해서 넣고 싶을때, 만약 입력 길이에 제한이 있는 프로그램일 경우, width를 사용하면 기하급수적으로 큰 길이도 손쉽게 입력할 수 있게된다.

<br/>

%[n]$s라는 표현도 자주쓰는데, n번째 parameter를 특정 format string으로 처리할 때 사용한다. 특히, FSB에서 자주쓴다.

```c
printf("%2$d",1,2);     // 2 출력
printf("%5$p");         // Format string bug : 8번째 parameter에 해당하는 register 혹은 stack의 주소값 출력
```

## Format String Bug

![FSB]({{site.url}}/img/FSB.png)

위의 그림을 보자. 보통 왼쪽의 형식으로 printf를 사용하지만, 만약 오른쪽의 형식으로 잘못 사용할 경우, printf (혹은 기타 포맷 스트링 사용 함수들)는 기존의 방식대로 값을 참조하기 때문에, 포맷 스트링 개수만큼 main 함수의 스택 내용을 임의로 참조하게 된다. 이를 사용하여 FSB 해킹을 진행하게 된다. printf의 parameter 개수는 format string 개수로 결정된다.

<br/>

단, 32비트는 parameter를 스택에 push하여 전달하지만, **64비트는 우선 첫 6개의 parameter는 RDI, RSI, RDX, RCX, R8, R9 레지스터로 먼저 전달한 이후에, 7번째부터 스택에 저장하여 전달**하기 때문에, 이를 유의해서 문제를 해결해야한다. 실제로 printf("AAAAAAAA %p %p %p %p %p %p %p %p")라는 입력값을 줄경우, 

```
AAAAAAAA 0x7ffd62e94cf0 0x7f3b4926d8d0 0x1f (nil) (nil) 0x4141414141414141 0x2520702520702520...
```

이런식으로 출력되고, 7번째부터 스택에 저장된 값이 출력됨을 확인할 수 있다. gdb를 확인해보면 RDI, RSI에는 0x7ffd62e94cf0이 저장되어있다. (참고로 이 주소는 'AAAAAAAA %p %p ....'를 가리키는 주소이다.)

## 마치며

구체적인 FSB 예시나 실습은 추후 포스팅하도록 하겠다. 우선 일반적인 개념을 먼저 포스팅했다.