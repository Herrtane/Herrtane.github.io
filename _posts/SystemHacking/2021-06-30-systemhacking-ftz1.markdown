---
layout: post
title: <System Hacking> 03. find, daemon process, link (F.T.Z ~Level8) 
date: 2021-06-30 22:20:23 +0900
category: System_Hacking
comments: true
---

## F.T.Z Level 8까지 배운 지식들

### find 명령어

```
find -perm -4000 2>/dev/null
```

적어도(-) suid가 걸린(4000) 권한의 파일들을 찾고, 오류 메시지는 리다이렉션을 통해 출력하지 말라는 의미.

더 자세한 find 명령어는 reference를 참고하자.

### 데몬 프로세스 (daemon process)

리눅스에는 아래와 같이 프로세스를 분류할 수 있다.

1. Foreground process : 사용자가 제어하며, 부모프로세스가 존재.
2. Background process : 사용자가 제어하지 않고, 부모프로세스가 존재하지 않음. daemon process라고도 불림.
    - Stand-alone : 단독으로 메모리에 상주. 자주 사용하는 데몬. (/etc/init.d)
    - Xinetd : 슈퍼데몬이 메모리에 상주하면서, 간헐적으로 사용되는 데몬들을 실행시켰다가 종료시키는 방식. 서비스를 요청할 때만 xinetd데몬이 알아서 구동시켜주므로, 별도로 서비스를 가동시켜 줄 수는 없음. (/etc/xinetd.d)

해커스쿨 F.T.Z Level 4에서 /etc/xinetd.d에 심은 finger 백도어를 이용해서 root권한으로 system()함수를 호출하게끔 하는 문제가 나왔다.

### 링크

리눅스에서 링크는 두 가지가 존재한다. 두 링크 모두 원본 파일이나 링크 파일 중 아무거나 수정할 경우, 다른 나머지도 같이 수정되는 공통점이 있지만, 아래와 같은 차이점이 존재한다.

1. Hard link : 하나의 동일한 파일을 디스크의 여러 공간에 배치하여 여러 이름으로 사용하는 방식. 즉, i-node(다른 포스팅에서 자세히 다루겠다.)가 같은 파일들이 생성된다. 원본 파일이 삭제되어도 원본 파일 데이터에 직접 연결되어 있어, 데이터가 유지됨.
2. Symbolic link : 윈도우의 바로가기와 유사한 개념. 원본 파일을 여러 심볼릭 링크가 가리키고 있는 방식. 즉, i-node가 원본과는 다른 파일들이 생성된다. 원본 파일이 삭제되면, 아무런 구실을 하지 못함.

```
ln [원본 파일] [하드링크 이름] 
ln -s [원본 파일] [심볼릭링크 이름] 
```

해커스쿨 F.T.Z Level 5에서 생성 후 바로 사라지는 level5.tmp파일의 내용을 알아내기 위해, 심볼릭 링크를 사용했다.

```
ln -s level5_backup level5.tmp
```

level5.tmp가 생성되면, 그 순간 심볼릭 링크가 걸리고, 링크의 특성상 **수정되면 다른 한쪽도 같이 수정되는 특징**을 이용하여 level5_backup의 내용이 level5.tmp의 내용으로 수정된다.

## 마치며

다음 포스팅에서는 권한에 대해 더 자세하게 다루어 볼 예정이다. 더불어, 왜 리눅스에서 권한이 엄격하고 중요한지 내가 실생활에서 깨달은 사례를 적어볼 예정이다.