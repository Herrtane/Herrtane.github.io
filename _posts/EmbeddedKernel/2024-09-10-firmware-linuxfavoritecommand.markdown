---
layout: post
title: <Firmware> 4. 자주 사용하는 Linux 기능 및 Shell script 관련 정리
date: 2024-09-10 14:30:23 +0900
category: Embedded/Kernel
comments: true
---

## 자주 사용하는 Linux 기능

펌웨어 관련 보안 과제를 하면서, 암호화된 펌웨어의 헤더 부분을 자주 확인해야 되는 경우가 있는데, 매번 별도의 Hexeditor 등을 사용해서 확인하기보다는, 그때그때 명령어를 통해 확인하고 넘어가는 것이 훨씬 유용하다는 걸 깨달았다. 평소에는 잘 사용하지 않았던 몇가지 명령어들을 여기에 정리해놓는다.

### head 명령어

```
$ head -c [N] [file]
```

파일의 앞부분의 N바이트를 출력해주는 명령어이다.

### less 명령어 (with hexdump)

```
$ hexdump -C [file] | less
```

파일을 hexdump한 결과를 보여주되, 앞부분부터 내가 원하는 페이지만큼 움직이며 볼 수 있다. 단순히 hexdump를 하면 긴 파일의 경우 터미널 창을 불필요하게 뒤덮으므로, 이런 방식을 사용하면 편리하게 파일 내용을 볼 수 있다.

### dd 명령어

```
$ dd if=[input_file] of=[output_file] bs=$((0x[N])) skip=[M]
$ dd iflag=skip_bytes,count_bytes if=[input_file] of=[output_file] skip=$((0x[N])) count=$((0x[M]))
```

생각보다 파일의 헤더나 끝 부분을 cut-off 해야 할 때가 많다. Hexeditor로도 할 수 있지만, 터미널 창에서 벗어나기 번거로울 때는 이 방식이 훨씬 편하다. 위의 두 방식 중 편한 방식으로 사용하면 된다.

### history 명령어 (with grep)

```
$ history | grep '[string]'
```

내가 기존에 사용했던 명령어들 중, 특정 명령어를 어떻게 썼었는지 빠르게 검색할 때 유용하다. 종종 이전에 썼던 명령어를 다시 쓰고 싶은데, 정확히 어떤 option을 줬는지 기억이 안날 때, 이런 방식을 사용하면 유용하다.

## Shell script

**자동화** 관련 작업을 진행할 때, shell script가 얼마나 강력한지 이번 연구를 통해 체감할 수 있었다. 반복되는 작업의 양을 매우 간편하게 줄여줄 수 있는 스크립트이고, 익히는 데도 전혀 어렵지 않아서, 몇가지 기억하면 좋을 사항들을 적어놓는다.

### 큰 따옴표를 권장하는 이유 (변수의 관점에서)

```bash
file="my file.txt"
if [[ -f "$file" ]]; then
    echo "File exists"
fi
```

위와 같은 스크립트를 생각해보자. 저기서 **"$file" 대신 $file이라 써도 되지 않나?**라는 의문이 평소에 들었는데, 이에 대해 공부해보니, **변수 값에 공백이나 특수문자가 포함된 경우** 문제가 발생할 수 있기 때문에 따옴표를 권장한다는 것을 알게 되었다. 참고로, 쉘 스크립트에서 변수에 대한 몇 가지 규칙을 기억해놓으면 큰 따옴표를 쓰는 것이 권장됨을 체감할 수 있다.

1. 변수는 모든 값을 문자열로 저장하며, 자료형을 명시하지 않는다.
2. 값을 사용할 때 변수명 앞에 $를 사용한다.
3. 변수 생성 시 = 앞뒤로 공백이 없어야 한다.
4. 변수를 출력하고자 할 때, 중괄호로 감싸주는 습관을 들이면 좋다. ex. ${file}

### 명령어 치환시 반드시 괄호 사용

```bash
header=$(head -c 4 "$file")
```

위와 같은 스크립트를 생각해보자. 이런 방식으로 명령어의 실행 결과를 header라는 변수에 저장하기 위해선, 반드시 명령어 치환 기능을 사용해서 괄호 안에 명령어를 작성해야한다. 매우 많이 사용하는 방식인 만큼 기억하도록 하자.

## Conclusion

펌웨어, 리눅스와 관련된 연구와 공부는 항상 재밌다고 느낀다. 앞으로도 기록해놓을 만한 부분은 그때 그때 기록하도록 하겠다.