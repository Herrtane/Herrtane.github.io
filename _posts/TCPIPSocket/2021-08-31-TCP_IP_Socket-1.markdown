---
layout: post
title: <TCP/IP Socket> 03. 소켓 프로그래밍에 대한 개론적인 이야기
date: 2021-08-31 20:47:23 +0900
category: TCP/IP_Socket
comments: true
---

## 소켓 프로그래밍의 뼈대

컴퓨터 네트워크에서는 주로 low level에서 컴퓨터 간의 네트워킹이 어떻게 진행되는지 배웠다면, 소켓 프로그래밍에서는 그 과정을 어떻게 소프트웨어적으로 구현하는지를 다룬다. 

<br/>

**소켓**은 운영체제에서 제공하는 소프트웨어적인 장치로서, 물리적으로 연결된 네트워크 상에서의 데이터 송수신에 사용할 수 있다. 소켓 프로그래밍은 서버와 클라이언트가 각각 다른 뼈대를 가지는데, 서버부터 살펴보면 크게 4가지로 요약할 수 있다. 이를 윤성우님의 전화기 비유를 들면서 설명하겠다.

1. socket() : 소켓을 생성하는 단계. 전화기 하나를 설치하는 단계.
2. bind() : 소켓에 주소(IP와 Port번호)를 부여하는 단계. 전화기에 전화번호를 부여하는 단계.
3. listen() : 소켓이 연결요청이 가능한 상태가 되도록 하는 단계. 전화기가 전화 케이블에 연결되는 단계.
4. accept() : 누군가가 데이터의 송수신을 위해 연결요청을 해오면, 그 요청을 수락하는 단계. 전화기에 전화가 울렸을 때, 수화기를 드는 단계.

다음으로, 클라이언트는 크게 2가지로 요약할 수 있다.

1. socket() : 소켓을 생성하는 단계. 전화기 하나를 설치하는 단계.
2. connect() : 서버로 소켓을 연결하는 단계. 전화를 거는 단계.

앞으로 설명할 모든 소켓 프로그래밍은 위의 과정에서 세부적으로 들어가게 된다.

## 기본적인 헤더파일에 대한 소개

소켓 프로그래밍을 하다 보면, 다양한 헤더 파일이 등장하는데, 여기에 그 중 가장 기본이 되는 몇가지를 적어놓는다.

1. stdlib.h : atoi (문자열을 정수형으로 변환). (s)rand, malloc, exit 등 범용적인 c함수들 제공
2. unistd.h : 다양한 상수와 자료형, 그리고 read, close등의 함수 제공
3. arpa/inet.h : 숫자로 IP주소를 조작할 경우 필요한 함수 제공

## 리눅스와 윈도우

윈도우와 리눅스는 소켓 프로그래밍의 코드 구현에서 약간의 차이가 존재하는데, 결국 윈도우도 BSD 계열 유닉스 소켓을 참고해서 제작했기 때문에 상당히 유사하다. 윈도우 관련 소켓 프로그래밍은 앞으로 추가적으로 다루어야 할 때, 설명을 이어가겠다. 리눅스에서 필요한 파일 디스크립터 등의 개념은 이미 시스템 프로그래밍과 운영체제에서 많이 익숙해졌기 때문에, 추가적으로 설명하지는 않겠다. 이에 대한 설명은 시스템 프로그래밍을 참고하자.

## 마치며

올해 1월까지 소켓 프로그래밍에 대한 학습은 어느정도 마무리 되었지만, 아무래도 배워왔던 방대한 지식을 정리하지 않고 가기에는 찝찝함이 많이 남았다. 그래서 아예 이곳에 배웠던 지식들을 정리해서 올릴 계획이다. 요새, 시스템 프로그래밍과 게임 프로그래밍등 많은 것들을 동시에 접하고 있어서 정신이 없기 때문에, 하나하나 정리해간다는 마인드로 임하겠다.