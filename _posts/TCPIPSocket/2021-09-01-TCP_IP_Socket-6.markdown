---
layout: post
title: <TCP/IP Socket> 08. TCP에서의 Half-close
date: 2021-09-01 22:50:23 +0900
category: TCP/IP_Socket
comments: true
---

## 스트림에 대해

두 호스트의 소켓이 서로 연결되면, 이를 **스트림**이라고 표현한다. 스트림의 사전적 의미처럼, 물이 흐르듯이 한 쪽 방향으로 데이터가 흐르기 때문에, 스트림은 입력 스트림과 출력 스트림 두 개가 별개로 형성된다. 따라서, 양방향 통신을 위해서는 두 스트림이 모두 필요하다.

## 일방적인 종료를 막기 위한 Half-close

TCP/IP 카테고리에 내가 처음 게시했던 코드들을 보면, close() 혹은 closesocket() 함수를 자주 사용했다. 이 함수들은 입출력 스트림을 동시에 모두 끊는 함수들인데, 이를 **일방적인 종료**라고 한다. 때때로 이는 문제가 될 수 있는데, 만약 상대 호스트에서 미처 전송을 완료하지 못한 데이터가 있을 경우, 내가 속한 호스트가 이를 미리 확인하지 못하고 입출력 스트림을 모두 닫았을 경우, 데이터를 더이상 수신하지 못하게 된다. 이런 상황에서 필요한 것이 바로 **Half-close**이다.

<br/>

Half-close는 말 그대로 입출력 스트림 중에 한 스트림만 종료하는 것이다. 이를 통해서, 미처 수신하지 못한 데이터를 마저 수신하고 연결을 종료할 수 있는 등 안전하게 종료가 가능하다. TCP 통신 과정에서 종료 단계에 등장하는 **Four way handshaking**가 예시라고 할 수 있겠다. 이는 shutdown()함수를 통해 구현이 가능하다.

```c
#include <sys/socket.h>

int shutdown(int sock, int howto);
```

howto 인자로 SHUT_RD, SHUT_WR, SHUT_RDWR를 넣을 수 있다. 각각 입력, 출력, 입출력 스트림을 닫는다는 의미이다. 이 함수가 호출되면, 해당 방향으로 EOF가 상대 호스트로 전송된다.

## 마치며

Half-close를 우아한 종료라고 부른다. 그만큼 TCP의 연결 종료 과정에서 안전한 종료는 중요하다는 것이겠지.