---
layout: post
title: <TCP/IP Socket> 11. Inter Process Communication
date: 2021-10-02 14:50:23 +0900
category: TCP/IP_Socket
comments: true
---

## 프로세스간 통신 : 파이프

각 프로세스는 별개의 메모리 구조를 지니므로, fork() 함수호출을 하더라도 서로 메모리 공간을 공유하지 않는다. 결국 프로세스 간의 데이터를 공유하기 위해서는 별도의 통신 수단이 필요한데, 대표적인 예시가 바로 **파이프**이다. 참고로 이는 프로세스에 속한 자원이 아니라 운영체제에 속한 자원이다.

```c
#include <unistd.h>

int pipe(int filedes[2]);
```

filedes[0]은 파이프의 출구, 즉 수신용 파일 디스크립터가 저장되고, filedes[1]은 파이프의 입구, 즉 전송용 파일 디스크립터가 저장된다. 그리고 이 파일 디스크립터를 공유하기 위해서 그제서야 필요한 것이 바로 fork()이다. **주의할 것은 파이프가 복사되는 것이 아니라, 파이프에 사용될 파일 디스크립터가 복사되는 것이다.**

<br/>

다만, 이 경우 일방향으로 통신이 이루어지는데, 만약 양방향으로 통신이 이루어지게끔 하기 위해서는 **하나의 파이프를 입출구 공용으로 사용하기 보다, 파이프를 하나 더 만들어서 각각 서로 반대 방향으로 통신하게끔 사용하는 것이 훨씬 효율적이고 안전하다.** 아래의 코드처럼 사용하면 된다.

```c
...
int fds1[2], fds2[2];
pipe(fds1), pipe(fds2);
...
```

## 마치며

역시 자세한 서버 구현 코드는 처음 포스팅한 github 링크를 참고하기 바란다.