---
layout: post
title: <Network> 05. Network layer
date: 2020-09-07 23:10:23 +0900
category: Network
comments: true
---
이번 포스팅에서는 Network layer에 대해서 다루어 보겠다. 

## Network layer의 역할

이번 시간에는 세 번째 계층인 Network layer에 대해서 작성하려고 한다. Network layer의 역할을 첫 포스팅에서 더 보충해서 적어보자면, 크게 두 가지가 있다. 

1. 패킷화(Packetizing) : 전송하는 데이터(payload라고 한다)를 목적지까지 무사히 전달하기 위해서 패킷화하는 역할을 담당하는데, 이는 데이터를 보호하기 위해 캡슐화하는 것과 같다.
2. 라우팅(Routing)과 포워딩(Forwarding) : 패킷이 목적지까지 가기 위한 최적의 경로를 찾는 것을 라우팅이라고 하며, 경로를 찾고 나서 실제로 패킷을 옮기는 과정을 포워딩이라고 한다. Network layer는 이 역할도 담당한다.

그렇다면, 실제로 Network layer에서는 어떻게 데이터, 즉 패킷을 전송하거나 교환할까? 

<br/>

과정은 이러하다. 데이터를 처리할 수 있도록 적당한 크기의 패킷들로 나눈 후, 송신측에서 하나씩 차례대로 패킷을 보낸다. 이 과정에서 패킷을 어떤 경로로 보낼지 결정해야 하는데, 목적지까지는 다양한 경로가 존재하기 때문에 어떤 경로는 연결하고, 어떤 경로는 연결을 해제해야 한다. 이를 **패킷 스위칭(packet switching)**이라고 한다. 이 패킷 스위칭의 방식은 두 가지로 나뉜다. 이제부터 하나씩 살펴보도록 하자.  

<br/>

### 1. Datagram Approach

첫 번째 방식은 datagram approach이다. 이 방식은 connectionless(송신측과 수신측이 고정적으로 연결되지 않는 방식)하고, 각각의 패킷이 독립적으로 다루어진다. 무엇보다도, 이 방식의 목적은 단지 목적지로의 패킷 전송일 뿐이므로, 각각의 패킷이 반드시 같은 경로로 전송될 필요가 없다. (참고로, UDP가 User Datagram Protocol인데, 이 방식이 등장한다! UDP는 Transport layer에서 자세히 다룰 것이다.)

![datagram]({{site.url}}/img/datagram.jpg)

위의 그림을 보면, 각각의 패킷이 독립적으로 움직이기 때문에, 각 패킷은 서로 다른 경로로 이동하고, 단지 목적지로만 무사히 도착하는 것이 이 방식의 목적이다. 라우터가 각각의 패킷의 경로를 하나하나 지정해준다.

<br/>

### 2. Virtual-Circuit Approach

두 번째 방식은 virtual-circuit approach이다. 이 방식은 반대로, connection-oriented(송신측과 수신측이 논리적으로 미리 연결되는 방식)이고, 각각의 패킷이 서로 연관되도록 하여 모든 패킷이 동일한 경로로 이동힌다. 사전에 연결된 경로로 이동하기 위해서, 각 패킷에는 flow label(패킷이 따라가야 할 경로에 대한 정보가 담겨있다)이 포함되어있다.

![virtual_circuit]({{site.url}}/img/virtual_circuit.jpg)

위의 그림을 보면, 각각의 패킷이 서로 묶여져서 한꺼번에 전송된다. 그리고 전송되기 전에, 미리 송신측과 수신측 사이에 어떤 경로로 패킷을 송수신할 것인지 결정하여 경로를 설정해놓기 때문에, 이후 패킷들은 정해진 경로에 따라서 이동하게 된다. 이 과정에서 flow label에 담긴 경로 정보를 참고하게 된다.

<br/>

## Network layer의 성능

지금까지 어떻게 Network layer가 패킷을 송수신하는지 그 방식과 역할을 알아보았다. 이 과정에서 패킷이 100% 이상적으로 전달되면 좋으련만, 현실적으로는 통신이 오고가는 과정에서 100%의 성능을 모두 발휘하기란 쉽지 않다. 지금부터는, Network layer의 성능에 대해서 살펴보려고 한다. (지금부터 하는 이야기는 비단 Network layer뿐만 아니라, OSI 7layer 전체에 적용되는 이야기이기도 하다.)

<br/>

Network layer의 성능을 결정짓는 요소는 크게 3가지가 있다.

1. Delay
2. Throughput
3. Packet loss

각각에 대해서 한번 살펴보자.

### 1. Delay

통신이 즉각즉각 이루어지면 참 좋겠는데, 아쉽게도 현실적으로는 제약이 따른다. 그 과정에서 통신에 지연이 발생하는데, 지연에는 크게 4가지의 종류가 존재한다.

1. Transmission delay : 장비의 전송 속도로 결정되는 delay이다. 예를 들면, 한 쪽의 전송 속도가 1이고 다른 쪽의 전송 속도가 3이면, 아무리 데이터 양이 많아도 적은 쪽의 데이터 전송 속도를 초과하지 못한다고 볼 수 있다.
2. Propagation delay : 신호의 거리와 전송 매개체의 성질 등으로 인해 발생한다. 예를 들면, 구리에서의 전송 속도와 아연에서의 전송 속도는 다를 것이다. 
3. Processing delay : 데이터 처리 및 데이터 오류 처리 등으로 인해 소요되는 시간으로 발생한다.
4. Queueing delay : 임시 저장 장소인 큐에서의 처리 지연으로 인해 발생한다.

<br/>

### 2. Throughput

두 번째 포스팅에서 잠시 다루었던 단어이다. Throughput, 즉 출력의 양은 각 경로의 전송량에 따라서 달라지는데, 만약 A에서 B까지 패킷을 전송하려고 하는데, 중간에 R1, R2 지점을 거쳐야 한다고 하자. R1까지는 200Kbps의 전송량이 나오고, R1에서 R2까지는 100Kbps, R2에서 B까지는 150Kbps의 전송량이 나온다면, 병목현상에 의해서, 아무리 다른 지점에서 전송량이 높아도 R1에서 R2까지의 100Kbps에 의해 전송량이 제약을 받을 수 밖에 없다. 이렇게 출력이 결정된다.

<br/>

### 3. Packet loss

만약 수신측에서 패킷을 미처 다 처리하지도 못한 채로, 송신측에서 빠른 속도로 패킷이 전송된다면, 수신측의 패킷 버퍼가 overflow될 가능성이 존재한다. 그렇다면 일부 패킷이 아예 버려지게 되는데, 이를 패킷 소실이라고 한다.

<br/>

지금까지 Network layer의 성능을 결정짓는 3가지 요소에 대해서 살펴보았다.

<br/>
<br/>

## 마치며

Network layer의 핵심 프로토콜인 IP Addressing에 대해서는 추후 추가할 예정이다. 이 부분은 생활코딩에서도 많이 배웠던 내용이라 내게는 많이 익숙한 부분이기 때문에, 당장 급하게 포스팅하기 보다는, 이후에 천천히 다루어보려고 한다.


<br/>

다음 포스팅은 네 번째 계층인 Transport Layer에 대해서 다루어볼 예정이다.
