---
layout: post
title: <OS> 04. 교착상태와 기아상태
date: 2022-01-07 23:53:23 +0900
category: OS
comments: true
---

## 교착상태 

- 다중 프로그래밍 시스템에서 프로세스가 결코 일어나지 않을 사건을 기다리는 상태가 되면 교착 상태 (deadlock)에 빠졌다고 함.
- 작업을 교체하거나 종료하는 인터럽트로 이것을 해결해야 함.
- 두 프로세스가 사용하는 자원을 서로 기다리고 있을 때 발생.
- 일괄 처리 시스템에서는 운영체제가 요청한 자원을 준비 큐로 이동시키기 전에 먼저 사용 가능 여부를 확인했기 때문에 교착 상태가 발생하지 않았으나, 대화식 시스템에서는 동적 자원을 공유하여 자원의 사용률을 높이는 과정에서 교착 상태 가능성 생김.
- 자원 요청 -> 자원 사용 -> 자원 해제 순으로 프로세스가 자원을 사용함. 교착 생태에서는 자원 요청과 해제가 중요함.
- 스풀링 시스템에서는 교착 상태를 해결하기 위해 스풀링 파일의 일정 포화 임계치 (saturation threshold)를 설정하여 교착 상태를 예방. 일정 퍼센트 이상 스풀 공간이 차면 새로운 작업을 읽어들이지 못하도록 방지. 대신 시스템 처리량은 감소할 수 있음. 

### 교착상태의 발생 조건 

1. 상호 배제 (mutex)
2. 점유와 대기 (hold and wait)
3. 비선점 (non-preemption)
4. 순환(환형)대기 (circular wait) 

- 생각해보면 쉬움. 만약 선점이 가능하면, 애초에 대기는 발생하지 않고, mutex가 없으면 역시 대기는 발생하지 않음. 결국 모든 것이 대기의 문제임.
- 선점 자원은 메모리, 버퍼, 프로세서 등 부작용 없이 프로세스에서 빼앗아 선점할 수 있는 자원. 비선점 자원은 프린터, CD 드라이브, 스캐너, 임계영역 등 그 반대의 경우. 

### 교착상태의 표현 

- 이 부분은 책을 참고할것. 

## 교착 상태의 해결 방법 

1. 교착 상태 예방
2. 교착 상태 회피
3. 교착 상태 탐지 및 회복 

### 교착 상태 예방 

1. 자원의 상호배제 조건 방지 : 공유 자원이라면 자원의 상호배제 조건이 성립하지 않으므로, 공유 자원에 한해서는 예방이 가능함.
2. 점유와 대기조건 방지 : 프로세스가 자원을 한꺼번에 요청하게 하고, 그 전까지는 작업을 보류하게 하여 아예 대기를 하지 않게끔 함. 다만, 이 경우 자원의 효율성이 너무 낮아지거나 기아상태가 발생할 수 있음.
3. 비선점 조건 방지 : 프로세스에 우선순위를 부여하여 우선권이 높은 프로세스가 낮은 우선순위의 프로세스의 자원을 선점하는 등의 방법을 사용.
4. 순환 대기 조건 방지 : 프로세스에 고유 숫자를 부여하여 오름차순으로만 자원을 요청할 수 있게 하는 등 수학적 방법을 사용. 

### 교착 상태 회피 

- 교착 상태 예방보다 장치의 효율성과 시스템 처리량을 보장하는 방법.
- 교착 상태의 발생 가능성을 미리 제거하는 것이 아니라, 그 가능성을 인정하고 적절히 상황마다 회피하는 것.
- 프로세스의 시작을 중단하거나 자원 할당을 거부. 

1. 프로세스의 시작 중단 : 회피 알고리즘 중 가장 단순함. 각 프로세스가 필요한 자원의 최대치를 선언. 최대치를 미리 파악할 수 있다면, 교착 상태가 될 이유가 없기 때문임. 각 프로세스에 최대치까지 자원을 할당할 수 있고 교착 상태를 예방할 수 있으며 안정순서가 존재할 경우, 안정된 상태. 교착 상태는 불안정 상태에서 발생하며, 모든 불안정 상태가 교착 상태는 아님. 자세한 예시는 책을 참고.
2. 자원 할당 거부 (Banker's Algorithm) : 1번과 유사하나, 자원의 최대치만을 보는 것이 아님. Need에 맞는 자원을 할당할 수 있는지 미리 안전 알고리즘으로 확인. 자세한 예시는 역시 책을 참고. 

### 교착 상태 회복 

- 시스템 상태를 검사하는 교착 상태 탐지 알고리즘과 교착 상태에서 회복시키는 알고리즘이 필요.
- 교착 상태 탐지 알고리즘을 자주 실행하면 시스템의 성능은 떨어지나, 교착 상태에 빠진 프로세스를 빨리 발견 가능. Banker's Algorithm과 유사하며, 자세한 예시는 책을 참고.
- 교착 상태에서 회복하기 위해서는 프로세스를 중단하거나, 자원을 선점해야 함.
- 프로세스를 중단하는 것은 한 프로세스씩 중단하는 방식과 교착 상태의 모든 프로세스를 중단하는 방식이 있음. 각각 단점이 존재. 

## 기아 상태