---
layout: post
title: <OS> 12. 파일 관리
date: 2022-02-02 22:57:23 +0900
category: OS
comments: true
---

## 파일 시스템과 파일 

- 파일은 논리적 저장 단위.
- 운영체제는 파일과 메모리를 매핑시키는 파일 시스템 기능 제공.
- 파일 시스템 : 파일 + 디렉토리
- 파일 시스템의 목적은 다양한 형태의 저장장치에 입출력을 지원하는 것, 데이터를 보호하고 성능을 최적화시키는 것.
- 파일 시스템의 계층 구조 : 장치 드라이버 - 입출력 제어기 - 기본 파일 시스템 - 파일, 구성모듈 - 논리 파일 시스템 - 응용 프로그램
- 블록 : 메모리와 디스크 간 전송 단위, 디스크에서 하나의 섹터 이상으로 구성됨.
- 메타데이터 : 데이터의 정보. 사용자가 직접 수정할 수 없으므로 파일 시스템의 무결성 유지.
- 마운팅 : 시스템에서 새로운 파일 시스템을 사용하기 위해 파일 시스템을 미리 제공된 파일 시스템의 디렉터리에 설치하는 것. 여러 파일 시스템을 단일 파일 시스템에서 식별할 수 있는 파일 집합으로 결합. 유닉스에선 mount 명령어를 통해 초기 파일 시스템의 마운트 포인트 (디렉터리)를 마운트된 파일 시스템의 루트에 할당. 

### 파일의 구성 

- 파일은 블록들로 구성됨.
- 블록은 레코드들로 구성됨.
- 레코드는 항목 (필드)들로 구성됨. 필드는 바이트의 모임. 

### 파일의 속성 

- 파일 속성 : 시스템이 파일을 관리하는 데 필요한 정보. 파일 속성 안에 파일 식별자 번호가 포함됨. 각 파일에 있는 파일 헤더가 파일 속성과 내용을 저장하는데, 유닉스에서의 i노드에 해당함. 

### 파일의 종류 

- 일반 파일
- 디렉터리 파일
- 특수 파일 

### 파일 디스크립터 

- 파일을 액세스하는 동안 운영체제에 필요한 정보를 모아 놓은 자료구조.
- 파일마다 독립적으로 존재하며, 파일을 열때 프로세스가 생성.
- 파일 시스템이 관리하므로 사용자가 직접 참조 불가.
- 열린 각 파일이나 디렉터리의 파일 디스크립터는 디스크에 저장했다가, 파일을 열면 메모리에 복사함.
- 자세한 건 TCP/IP에서 다뤘음. 

### 파일에 액세스하는 방법 

- 순차 액세스 : 파일에 있는 정보를 레코드 단위로  순차적으로 접근하는 방식.
- 직접 액세스 : 모든 블록을 직접 읽거나 쓰고, 순서에 구애받지 않는 방식.
- 인덱스 순차 액세스 (ISAM, Indexed Sequential Access Method) : 파일에서 특정 항목을 찾기위해서 먼저 마스터 인덱스를 이진 탐색하여 2차 인덱스 블록 번호를 알아내고, 이 블록에서 다시 이진 탐색하여 원하는 레코드를 포함하는 블록을 찾고, 포인터를 사용하여 파일을 직접 액세스해서 원하는 항목을 찾아내는 방식. 

## 디렉터리 시스템 

- 장치 디렉터리 : 각 실제 장치에 저장되어있음. 장치에 있는 파일의 위치, 크기 등을 나타냄.
- 파일 디렉터리 : 이름, 파일유형, 소유한 사용자 등을 기술함. 

### 디렉터리의 구조 

- 1단계 디렉터리 : 가장 간단한 구조. 장치디렉터리가 그 예.
- 2단계 디렉터리 : 사용자들이 루트 디렉터리 (Master File Directory)로부터 자신의 서브 디렉터리 (User File Directory)를 생성하고, 그곳에 자신의 파일을 구성하는 것. 유닉스, 도스가 그 예.
- 트리 구조 디렉터리 : 2단계 디렉터리는 높이가 2인 트리 구조. 유닉스나 윈도우에서 사용하며, 우리가 흔히 아는 구조.
- 비순환 그래프 디렉터리 : 트리 구조와 유사하나, 디렉터리가 서브디렉터리와 파일을 공유할 수 있으며, 링크를 이용해서 경로명으로 구현 가능함. 단, 복잡하고 dangling pointer가 발생할 수 있음. (이는 유닉스의 i노드에 참조 카운터를 두는 방식으로 해결 가능)
- 일반 그래프 디렉터리 : 트리 구조 디렉터리에 새로운 파일을 첨가하거나 서브 디렉터리를 첨가하면 트리 구조는 그대로 유지하지만, 링크를 가지면 트리 구조가 파괴되어 일반 그래프 디렉터리가 됨. 

## 파일의 디스크 할당 

- 연속할당 : 메인 메모리의 동적 분할 방법과 비슷. 사용 가능한 빈 영역은 최초 적합, 최적 적합, 최악 적합이 있음. 외부 단편화 발생 가능.
- 연결 할당 : linked list처럼 서로 포인터로 연결하기 때문에 디스크 블록들은 디스크 내에 흩어져 있어도 됨. 단, 직접 액세스가 불가하여 순차 액세스 파일에만 적합. 포인터 공간이 별도로 필요하고, 포인터 손실 우려로 신뢰성이 부족함. 이 문제들은 doubly linked list와 file allocation table로 부분적으로 해결 가능함.
- 인덱스 할당 : 모든 포인터를 인덱스 블록이라는 하나의 장소에서 관리하여 직접 액세스를 지원. 각 파일당 인덱스 블록 하나씩 가짐. 이것이 확장되어 다중 인덱스 파일 할당을 하게되면, 이것이 곧 i노드가 됨.

### 디스크의 빈 공간 관리 방법

- 비트맵 : 각 블록의 사용 여부를 001110010100과 같이 1비트로 표현. 연속적인 빈 블록 n개를 찾는 데 효과적이나, 비트 벡터 전체를 메모리에 보관하지 않으면 비효율적이기 때문에 대형 컴퓨터보다는 마이크로 컴퓨터 환경에 적합.
- 연결 리스트 : 첫 번째 빈 블록 내에서 다음 빈 디스크 블록의 포인터를 갖도록 연결 리스트로 구현할 수 있음. 빈 공간 리스트를 탐색할 때 각 블록을 모두 읽어야 하기 때문에 비효율적.
- 인덱스 블록 (그룹핑) : 첫 번째 빈 블록 내에 빈블록 n개의 번지를 저장, 마지막 n번째 블록 내에 다시 다음 n개의 번지를 저장.

## 파일 보호 방법

- 파일 명명 : 사용자가 파일을 명명할 수 없으면 해당 사용자는 파일을 작성할 수 없음.
- 암호
- 액세스 제어 : 사용자 신원에 따라 서로 다른 액세스 권한 부여.
- 액세스 그룹 : 유닉스의 rwxrwxrwx시스템.
- 사용자 권한 지정 : 사용자가 계정을 받을 때 부터 특정한 디렉터리와 파일만 액세스할 수 있도록 시스템 관리자가 허락하고, 그 외의 영역을 액세스를 불허하는 방법.