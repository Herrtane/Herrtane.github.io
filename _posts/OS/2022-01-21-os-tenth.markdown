---
layout: post
title: <OS> 10. 가상 메모리 (2)
date: 2022-01-21 21:57:23 +0900
category: OS
comments: true
---

## 프레임 할당 알고리즘 

- 여러개의 프로세스 각각에 프레임을 몇개씩 할당할 건지 결정하는 알고리즘.
- 페이지 대치 알고리즘을 사용하는 것도 중요하지만, 프레임을 적절히 할당하여 페이지 부재의 횟수를 줄이는 방법도 중요.
- 특히 다중 프로그래밍 환경에서 필요.
- 균일할당과 비례할당 존재하며, 현대 운영체제에서는 이 두 방법을 혼용. 

## 메모리를 관리하는 프로세스 적재 정책 

- 얼마만큼의 프로세스를 메모리에 상주시킬 것인지 결정하는 정책.
- 적절한 수의 프로세스 상주 수를 결정하는 것이 중요. 

### 스래싱 

- 페이지 교환이 계속 일어나는 현상.
- 프로세서가 요구하는 최소한의 수보다 페이지 프레임 수가 적으면 적을수록 페이지 부재 비율은 증가.
- 다중 프로그래밍의 정도가 커질수록 프로세서 이용률은 일정 지점까지는 커지다가, 갑자기 급락하는 지점이 생기는데, 이때부터 스래싱 구간임.
- 스래싱을 예방하는 방법으로는 working set model, locality model이 있음.
- locality : 동일한 값이나 관련 저장 위치를 자주 액세스하는 현상. 시간 지역성과 공간 지역성으로 나뉨. locality를 이용하여 현재 지역 크기보다 적은 페이지 프레임을 할당하면, 페이지 부재가 발생할 수 있으므로 주의.
- 시간 지역성 : 순환, 서브 프로그램, 스택, 계산이나 합계에 사용되는 변수
- 공간 지역성 : 배열 검색(순회), 순차적 코드의 실행, 근처의 관련 변수 선언
- working set model (WSM) : locality를 이용하여, 프로세스가 많이 참조하는 페이지 집합을 메모리 공간에 계속 상주시켜 빈번한 페이지 대치 현상을 줄임. 시간 t에서의 작업집합 WS(t,w)를 시간 (t-w)부터 t까지 프로세스 시간 간격에 참조한 페이지의 집합으로 정의. 즉, t는 현재 프로세스 시간, w는 프로세스의 창 크기(프로세스의 작업 집합을 계산할 때 과거 어느 시간까지 포함할지).
- working set size (WSS) : w가 커지면서 메인 메모리에 유지하는 작업 집합도 커지지만, 너무 클 경우 메인 메모리의 용량을 초과하므로 일정 크기 이상 늘려도 w는 커지지 않음. 각 프로세스마다 WSS가 다르므로, 전체 요구 프레임 D = WSS들의 합.
- 각 프로세스는 실제로 각 작업 집합에 있는 페이지를 사용하므로, 프로세스에는 WSS 프레임이 필요함. 총 유효프레임수보다 D가 크면 스래싱 발생.
- 프로세스를 수행하는 동안 작업 집합은 계속 변하는데, 크기가 급격히 변하는 과도기와 비교적 적게 변하는 안정기가 반복해서 나타남.
- 작업 집합 크기가 너무 크고 페이지 프레임 수가 많으면, 다중 프로그래밍 정도를 저해할 수 있고, 반대의 경우는 스래싱 현상이 빈번해짐.