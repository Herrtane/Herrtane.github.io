---
layout: post
title: <OS> 11. 입출력 시스템과 디스크 관리
date: 2022-01-21 22:57:23 +0900
category: OS
comments: true
---

## 입출력 시스템 

- 물리적 장치 뿐만 아니라, 이들과 프로세서 사이에서 중간자 역할을 하는 입출력 모듈까지 포함한 개념.
- 입출력 장치를 직접 시스템 버스에 연결하지 않고 입출력 모듈을 거치는 이유는, 입출력 장치에 따라 제어하고 운용하는 방법이 다르기 때문.
- 입출력 장치를 통해 버퍼링과 오류 검출 등의 기능도 수행.
- 데이터를 전송하는 프로세서의 역할에 따라 입출력 방법은 아래의 세가지로 구분 가능. 

### 프로그램 제어 입출력 방법 

- 모든 데이터는 프로세서의 입출력 명령에 따라 전송
- 입출력 장치는 메모리를 직접 액세스할 수 없음.
- 프로세서의 비중이 큰 방법.
- 프로세서는 주기적으로 자신보다 느린 입출력 장치의 상태를 확인하기 위해, 입출력 모듈의 상태를 점검하는 폴링 (polling)의 과정을 거침. 입출력 장치가 데이터를 받을 준비가 될 때까지 반복 점검함. 

### 인터럽트 기반 입출력 방법 

- 입출력 장치가 작업을 완료하면, 작업과 관련된 상태와 결과를 메모리에 저장하고 인터럽트를 발생시켜 프로세서에 알림.
- polling 절차를 생략할 수 있어 효율성 증가하나, 현재의 작업 내용을 스택에 저장해야하는 오버헤드 발생. 

### DMA 입출력 방법 

- Direct Memory Access
- 프로세서의 도움 없이도 메인 메모리를 직접 제어하는 방법.
- 프로세서가 입출력 모듈과 메모리 사이의 데이터 전송에 관여하지 않음. 전송이 완료되면 출력 모듈이 프로세서에 인터럽트 발생시키고 종료 통보.
- 프로세서는 데이터 전송을 시작하고 종료할때만 관여.
- 입출력장치가 시스템 버스나 저장 시스템과 같은 자원을 독점적으로 액세스할 경우, cycle stealing 발생. 프로세서의 속도는 감소하나, 입출력 작업은 DMA에 전담시키므로 시스템 전체 성능은 향상.
- 이를 확장시킨 방법으로 입출력 채널이 있음. 입출력 모듈이 local memory를 가지면서 사실상 하나의 컴퓨터가 되고, 입출력 명령어들을 실행할 수 있는 기능이 생김. 

## 커널 입출력 서브시스템 

- 커널이 제공하는 입출력 관련 서비스로는, 입출력 스케줄링, 버퍼링, 스풀링, 캐싱, 오류처리 등이 있음. 

## 디스크의 구조와 스케줄링 

- 디스크는 동심원인 트랙, 동일한 동심원으로 구성된 실린더, 트랙을 부채꼴 모양으로 나눈 조각인 섹터 등으로 나눌 수 있음.
- 디스크 액세스 시간 = 탐색시간 + 회전 지연시간 + 전송시간
- 디스크 스케줄링은 탐색 시간 최적화 (트랙 이동)와 회전 지연시간 최적화 (섹터 이동)으로 나눌 수 있음.
- 탐색 시간 최적화 스케줄링 : FCFS, SSTF, SCAN, C-SCAN, LOOK
- 회전 지연시간 최적화 스케줄링 : SLTF, SPTF 

### FCFS 스케줄링 

- 크게 설명할 것이 없음. 선형 요청 디스크 큐에 들어온 트랙 순서대로 처리함. 

### SSTF 스케줄링 

- 최소 탐색 시간 우선 (Shortest Seek Time First)
- 헤드가 먼 곳까지 이동하기 전에 현재 헤드 위치에 가까운 모든 요구를 먼저 처리하는 방법.
- 디스크 요구의 기아 상태 발생 우려.
- 대화형시스템에서는 불확실한 예측 가능 시간때문에 부적합. 

### SCAN 스케줄링 

- 기아 상태를 해결하기 위한 스케줄링.
- 입출력 헤드가 디스크의 한쪽 끝에서 다른 끝으로 이동하며, 계속 왕복하면서 한 방향으로만 서비스. 

### C-SCAN 스케줄링 

- 순환 스캔 (Circular SCAN)
- 한쪽 끝에 다다르면 역방향으로 헤드를 이동하지 않고, 다시 처음부터 한방향으로 요청 처리. 

### N-step SCAN 스케줄링 

- 디스크 요청 큐를 고정 길이 N의 서브큐로 분할.
- 어느 방향으로 진행할 때 큐에 대기 중인 요청에서만 서비스 진행. (큐를 비움)
- 진행 도중 도착한 요청은 다른 큐로 이동하고 추가하여 다시 디스크 헤드가 방향을 바꿔 진행할 때 서비스.
- N이 클수록 SCAN 알고리즘에 근접.
- N이 1에 근접하면 FIFO에 근접. 

### LOOK 스케줄링 

- 끝에서 끝까지 이동하는 것이 아니라, 현재 방향에 더는 요청이 없을 때 이동 방향을 바꿔 서비스 처리. 즉, 움직이기 전에 먼저 요청이 있는지 검사. 

### SLTF 스케줄링 

- 최소 지연시간 우선 (Shortest Latency Time First)
- 모든 요청 중 회전 지연시간이 가장 짧은 요청 먼저 처리.
- Sector Queuing 알고리즘이라고도 함. 

### SPTF 스케줄링 

- 최소 위치 결정 시간 우선 (Shortest Positioning Time First)
- 탐색시간과 회전 지연시간의 합이 가장 짧은 요청 먼저 처리.
- Eschenbach 방법 : 헤드는 C-SCAN처럼 움직이며, 예외적으로 모든 실린더는 요청이 있든 없든 간에 전체 트랙이 한 바퀴 회전할 동안 서비스를 받음.