---
layout: post
title: <OS> 02. 프로세스와 스레드
date: 2022-01-07 23:51:23 +0900
category: OS
comments: true
---

## 프로세스 

: 실행중인 프로그램. 
: 스택 (지역변수), 힙 (동적 할당), 데이터 (전역변수, 정적변수), 코드 등으로 구성됨. 

### 프로세스의 종류 

1. 역할에 따라 : 시스템(커널) 프로세스와 사용자 프로세스
2. 병행 수행 방법에 따라 : 독립 프로세스와 협력 프로세스 

### 프로세스의 상태 변화 

: 작업 스케쥴러와 프로세스 스케쥴러를 이용해서 관리
- 준비 -> 실행 : dispatch
- 실행 -> 준비 : timeout
- 실행 -> 대기(보류) : block
- 대기(보류) -> 준비 : wakeup 

### PCB (Process Control Block) 

: 프로세스 식별자, 프로세스 상태, 프로그램 카운터, 레지스터 저장 영역, 프로세서 스케줄링 정보, 계정 정보 등을 이 블록에 저장. 

### 프로세스의 문맥 교환 (context switching) 

: 입출력 인터럽트, 클록 인터럽트 (timeout) 등이 발생하면, 문맥 교환 발생.
: 오버헤드가 크므로, 최대한 줄이는 것이 바람직함. 

### 프로세스의 중단과 재시작 

: 프로세스의 준비, 실행, 대기 상태만 이용하면 입출력 동작이 일반 연산보다 느려 시스템이 대부분 유휴 상태
: 마치 윈도우에서 다수의 응용 프로그램 실행 시 현재 사용중인 윈도우 외에는 비활성화 상태가 되는 것과 같음.
: 유휴상태 문제의 해결책이 바로 중단임.
: 새로운 프로세스를 생성하여 실행하는 방법보다, 시스템 전체의 부하를 증가시키지 않으면서 프로세스에 서비스를 제공할 수 있음.
: 대기 상태와는 다르게, 특정 이벤트의 발생을 기다리면서 해당 이벤트 발생 시 즉시 실행상태로 바꿀 수 있는 장점이 있음.
: 다중 프로그래밍에서는 자원 부족 상태를 의미하기도 함.
: 자원을 할당받으려고 기다리는 상태가 대기, 할당받은 자원을 기다리는 상태가 중단. 

## 스레드 

: 프로세스의 두가지 특성인 자원과 제어 중, 제어만 분리한 실행단위
: 스택은 독립적으로 가지면서, 코드, 전역 데이터, 힙을 다른 스레드와 공유
- 경량 프로세스 (light weight process) : 프로세스의 속성 중 일부가 들어있는 것
- 중량 프로세스 (heavy weight process) : 스레드 하나에 프로세스 하나인 전통적인 경우
: 단일 스레드와 다중 스레드가 존재. 현대 운영체제는 대부분 다중 스레드.
: TCB (Thread Control Block) 이 존재.
: 상태 변화가 존재.
: 사용자 수준 스레드, 커널 수준 스레드, 혼합형 스레드가 존재.